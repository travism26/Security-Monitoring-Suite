apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-migrations
data:
  001_initial_schema.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-01-31
    -- Description: Core schema for log aggregation system

    -- Logs table schema
    CREATE TABLE IF NOT EXISTS logs (
        id VARCHAR(36) PRIMARY KEY,
        timestamp TIMESTAMP NOT NULL,
        host VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        level VARCHAR(50) NOT NULL,
        metadata JSONB,
        process_count INTEGER,
        total_cpu_percent FLOAT,
        total_memory_usage BIGINT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Process logs table schema
    CREATE TABLE IF NOT EXISTS process_logs (
        id VARCHAR(36) PRIMARY KEY,
        log_id VARCHAR(36) REFERENCES logs(id),
        name VARCHAR(255) NOT NULL,
        pid INTEGER NOT NULL,
        cpu_percent FLOAT,
        memory_usage BIGINT,
        status VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Performance indexes
    CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs(timestamp);
    CREATE INDEX IF NOT EXISTS idx_logs_host ON logs(host);
    CREATE INDEX IF NOT EXISTS idx_process_logs_log_id ON process_logs(log_id);
    CREATE INDEX IF NOT EXISTS idx_process_logs_name ON process_logs(name);

  002_alerts_schema.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-01-31
    -- Description: Alert management schema for log aggregation system

    -- Alerts table schema
    CREATE TABLE IF NOT EXISTS alerts (
        id VARCHAR(36) PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        severity VARCHAR(20) NOT NULL,
        status VARCHAR(20) NOT NULL,
        source VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NOT NULL,
        updated_at TIMESTAMP NOT NULL,
        resolved_at TIMESTAMP
    );

    -- Alert logs relationship table
    CREATE TABLE IF NOT EXISTS alert_logs (
        alert_id VARCHAR(36) NOT NULL,
        log_id VARCHAR(36) NOT NULL,
        PRIMARY KEY (alert_id, log_id),
        FOREIGN KEY (alert_id) REFERENCES alerts(id) ON DELETE CASCADE,
        FOREIGN KEY (log_id) REFERENCES logs(id) ON DELETE CASCADE
    );

    -- Alert metadata table
    CREATE TABLE IF NOT EXISTS alert_metadata (
        alert_id VARCHAR(36) NOT NULL,
        key VARCHAR(255) NOT NULL,
        value TEXT NOT NULL,
        PRIMARY KEY (alert_id, key),
        FOREIGN KEY (alert_id) REFERENCES alerts(id) ON DELETE CASCADE
    );

    -- Performance indexes
    CREATE INDEX IF NOT EXISTS idx_alerts_status ON alerts(status);
    CREATE INDEX IF NOT EXISTS idx_alerts_severity ON alerts(severity);
    CREATE INDEX IF NOT EXISTS idx_alerts_created_at ON alerts(created_at);
    CREATE INDEX IF NOT EXISTS idx_alerts_source ON alerts(source);

  003_add_indexes.sql: |
    -- Add additional performance indexes
    CREATE INDEX IF NOT EXISTS idx_logs_level ON logs(level);
    CREATE INDEX IF NOT EXISTS idx_logs_created_at ON logs(created_at);
    CREATE INDEX IF NOT EXISTS idx_process_logs_pid ON process_logs(pid);
    CREATE INDEX IF NOT EXISTS idx_process_logs_created_at ON process_logs(created_at);
    CREATE INDEX IF NOT EXISTS idx_alerts_updated_at ON alerts(updated_at);

  004_add_multi_tenancy.sql: |
    -- Add multi-tenancy support

    -- Create organizations table
    CREATE TABLE organizations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
        settings JSONB DEFAULT '{}'::jsonb
    );

    -- Create API keys table
    CREATE TABLE api_keys (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
        key_type VARCHAR(50) NOT NULL CHECK (key_type IN ('agent', 'customer')),
        key_hash VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP WITH TIME ZONE,
        last_used_at TIMESTAMP WITH TIME ZONE,
        status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'revoked')),
        permissions JSONB DEFAULT '{}'::jsonb
    );

    -- Add tenant ID to logs table (nullable for optional multi-tenancy)
    ALTER TABLE logs 
    ADD COLUMN organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE NULL;

    -- Add tenant ID to alerts table (nullable for optional multi-tenancy)
    ALTER TABLE alerts
    ADD COLUMN organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE NULL;

    -- Add indexes for tenant-based queries
    CREATE INDEX idx_logs_org_id ON logs(organization_id);
    CREATE INDEX idx_alerts_org_id ON alerts(organization_id);
    CREATE INDEX idx_api_keys_org_id ON api_keys(organization_id);
    CREATE UNIQUE INDEX idx_api_keys_hash ON api_keys(key_hash);

    -- Add composite indexes for common tenant queries
    CREATE INDEX idx_logs_org_timestamp ON logs(organization_id, timestamp);
    CREATE INDEX idx_alerts_org_status ON alerts(organization_id, status);

    -- Add trigger to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_organizations_updated_at
        BEFORE UPDATE ON organizations
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();

  007_add_api_key_column.sql: |
    -- Add API key tracking to logs table

    -- Add api_key column to logs table
    ALTER TABLE logs
    ADD COLUMN api_key VARCHAR(255);

    -- Create index for efficient querying by API key
    CREATE INDEX idx_logs_api_key ON logs(api_key);

  008_nullable_organization_id.sql: |
    -- Make organization_id nullable for alerts and logs when multi-tenancy is disabled
    ALTER TABLE alerts DROP CONSTRAINT alerts_organization_id_fkey;
    ALTER TABLE alerts ALTER COLUMN organization_id DROP NOT NULL;
    ALTER TABLE alerts ADD CONSTRAINT alerts_organization_id_fkey 
        FOREIGN KEY (organization_id) 
        REFERENCES organizations(id) 
        ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED;

    ALTER TABLE logs DROP CONSTRAINT logs_organization_id_fkey;
    ALTER TABLE logs ALTER COLUMN organization_id DROP NOT NULL;
    ALTER TABLE logs ADD CONSTRAINT logs_organization_id_fkey 
        FOREIGN KEY (organization_id) 
        REFERENCES organizations(id) 
        ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED;

  010_add_user_tracking.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-02-19
    -- Description: Add user tracking to logs and alerts

    -- Add user_id column to logs table
    ALTER TABLE logs
    ADD COLUMN user_id VARCHAR(24);

    -- Add user_id column to alerts table
    ALTER TABLE alerts
    ADD COLUMN user_id VARCHAR(24);

    -- Add indexes for efficient querying
    CREATE INDEX idx_logs_user_id ON logs(user_id);
    CREATE INDEX idx_alerts_user_id ON alerts(user_id);

    -- Add composite indexes for common queries
    CREATE INDEX idx_logs_user_timestamp ON logs(user_id, timestamp);
    CREATE INDEX idx_alerts_user_status ON alerts(user_id, status);
