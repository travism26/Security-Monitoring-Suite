apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-migrations
data:
  001_initial_schema.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-01-31
    -- Description: Core schema for log aggregation system including logs, process logs, alerts, and indexes

    -- Logs table schema
    CREATE TABLE IF NOT EXISTS logs (
        id VARCHAR(36) PRIMARY KEY,
        timestamp TIMESTAMP NOT NULL,
        host VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        level VARCHAR(50) NOT NULL,
        metadata JSONB,
        process_count INTEGER,
        total_cpu_percent FLOAT,
        total_memory_usage BIGINT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        organization_id VARCHAR(24),
        user_id VARCHAR(24),
        api_key VARCHAR(255)
    );

    -- Process logs table schema
    CREATE TABLE IF NOT EXISTS process_logs (
        id VARCHAR(36) PRIMARY KEY,
        log_id VARCHAR(36) REFERENCES logs(id),
        name VARCHAR(255) NOT NULL,
        pid INTEGER NOT NULL,
        cpu_percent FLOAT,
        memory_usage BIGINT,
        status VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Performance indexes for logs and process logs
    CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs(timestamp);
    CREATE INDEX IF NOT EXISTS idx_logs_host ON logs(host);
    CREATE INDEX IF NOT EXISTS idx_process_logs_log_id ON process_logs(log_id);
    CREATE INDEX IF NOT EXISTS idx_process_logs_name ON process_logs(name);
    CREATE INDEX IF NOT EXISTS idx_logs_level ON logs(level);
    CREATE INDEX IF NOT EXISTS idx_logs_created_at ON logs(created_at);
    CREATE INDEX IF NOT EXISTS idx_process_logs_pid ON process_logs(pid);
    CREATE INDEX IF NOT EXISTS idx_process_logs_created_at ON process_logs(created_at);

    -- Alerts table schema
    CREATE TABLE IF NOT EXISTS alerts (
        id VARCHAR(36) PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        severity VARCHAR(20) NOT NULL,
        status VARCHAR(20) NOT NULL,
        source VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NOT NULL,
        updated_at TIMESTAMP NOT NULL,
        resolved_at TIMESTAMP,
        organization_id VARCHAR(24),
        user_id VARCHAR(24)
    );

    -- Alert logs relationship table
    CREATE TABLE IF NOT EXISTS alert_logs (
        alert_id VARCHAR(36) NOT NULL,
        log_id VARCHAR(36) NOT NULL,
        PRIMARY KEY (alert_id, log_id),
        FOREIGN KEY (alert_id) REFERENCES alerts(id) ON DELETE CASCADE,
        FOREIGN KEY (log_id) REFERENCES logs(id) ON DELETE CASCADE
    );

    -- Alert metadata table
    CREATE TABLE IF NOT EXISTS alert_metadata (
        alert_id VARCHAR(36) NOT NULL,
        key VARCHAR(255) NOT NULL,
        value TEXT NOT NULL,
        PRIMARY KEY (alert_id, key),
        FOREIGN KEY (alert_id) REFERENCES alerts(id) ON DELETE CASCADE
    );

    -- Performance indexes for alerts
    CREATE INDEX IF NOT EXISTS idx_alerts_status ON alerts(status);
    CREATE INDEX IF NOT EXISTS idx_alerts_severity ON alerts(severity);
    CREATE INDEX IF NOT EXISTS idx_alerts_created_at ON alerts(created_at);
    CREATE INDEX IF NOT EXISTS idx_alerts_source ON alerts(source);
    CREATE INDEX IF NOT EXISTS idx_alerts_updated_at ON alerts(updated_at);

  002_multi_tenancy.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-01-31
    -- Description: Multi-tenancy support with organizations, API keys, and related schema updates

    -- Create organizations table
    CREATE TABLE organizations (
        id VARCHAR(24) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
        settings JSONB DEFAULT '{}'::jsonb
    );

    -- Create API keys table
    CREATE TABLE api_keys (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        organization_id VARCHAR(24) NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
        key_type VARCHAR(50) NOT NULL CHECK (key_type IN ('agent', 'customer')),
        key_hash VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP WITH TIME ZONE,
        last_used_at TIMESTAMP WITH TIME ZONE,
        status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'revoked')),
        permissions JSONB DEFAULT '{}'::jsonb
    );

    -- Add foreign key constraints for organization_id
    ALTER TABLE logs
    ADD CONSTRAINT logs_organization_id_fkey 
    FOREIGN KEY (organization_id) 
    REFERENCES organizations(id) 
    ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED;

    ALTER TABLE alerts
    ADD CONSTRAINT alerts_organization_id_fkey 
    FOREIGN KEY (organization_id) 
    REFERENCES organizations(id) 
    ON DELETE CASCADE
    DEFERRABLE INITIALLY DEFERRED;

    -- Add indexes for tenant-based queries
    CREATE INDEX idx_logs_org_id ON logs(organization_id);
    CREATE INDEX idx_alerts_org_id ON alerts(organization_id);
    CREATE INDEX idx_api_keys_org_id ON api_keys(organization_id);
    CREATE UNIQUE INDEX idx_api_keys_hash ON api_keys(key_hash);

    -- Add composite indexes for common tenant queries
    CREATE INDEX idx_logs_org_timestamp ON logs(organization_id, timestamp);
    CREATE INDEX idx_alerts_org_status ON alerts(organization_id, status);

    -- Add trigger to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_organizations_updated_at
        BEFORE UPDATE ON organizations
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();

  003_metrics_views.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-02-18
    -- Description: Add views for system metrics aggregation

    -- System metrics hourly aggregation view
    CREATE OR REPLACE VIEW system_metrics_hourly AS
    SELECT 
        date_trunc('hour', timestamp) as time_bucket,
        organization_id,
        host,
        COUNT(*) as sample_count,
        AVG(total_cpu_percent) as avg_cpu_percent,
        MAX(total_cpu_percent) as max_cpu_percent,
        MIN(total_cpu_percent) as min_cpu_percent,
        AVG(total_memory_usage) as avg_memory_usage,
        MAX(total_memory_usage) as max_memory_usage,
        MIN(total_memory_usage) as min_memory_usage,
        AVG(process_count) as avg_process_count,
        MAX(process_count) as max_process_count,
        MIN(process_count) as min_process_count
    FROM logs
    WHERE total_cpu_percent IS NOT NULL
        AND total_memory_usage IS NOT NULL
        AND process_count IS NOT NULL
    GROUP BY 
        date_trunc('hour', timestamp),
        organization_id,
        host;

    -- Process metrics hourly aggregation view
    CREATE OR REPLACE VIEW process_metrics_hourly AS
    SELECT 
        date_trunc('hour', l.timestamp) as time_bucket,
        l.organization_id,
        l.host,
        pl.name as process_name,
        COUNT(*) as sample_count,
        AVG(pl.cpu_percent) as avg_cpu_percent,
        MAX(pl.cpu_percent) as max_cpu_percent,
        MIN(pl.cpu_percent) as min_cpu_percent,
        AVG(pl.memory_usage) as avg_memory_usage,
        MAX(pl.memory_usage) as max_memory_usage,
        MIN(pl.memory_usage) as min_memory_usage,
        array_agg(DISTINCT pl.status) as status_list
    FROM logs l
    JOIN process_logs pl ON l.id = pl.log_id
    WHERE pl.cpu_percent IS NOT NULL
        AND pl.memory_usage IS NOT NULL
    GROUP BY 
        date_trunc('hour', l.timestamp),
        l.organization_id,
        l.host,
        pl.name;

    -- Add indexes to improve view performance
    CREATE INDEX IF NOT EXISTS idx_logs_metrics ON logs (
        timestamp,
        organization_id,
        host,
        total_cpu_percent,
        total_memory_usage,
        process_count
    ) WHERE 
        total_cpu_percent IS NOT NULL 
        AND total_memory_usage IS NOT NULL 
        AND process_count IS NOT NULL;

    CREATE INDEX IF NOT EXISTS idx_process_logs_metrics ON process_logs (
        name,
        cpu_percent,
        memory_usage
    ) WHERE 
        cpu_percent IS NOT NULL 
        AND memory_usage IS NOT NULL;

    -- Add function to get latest host metrics
    CREATE OR REPLACE FUNCTION get_latest_host_metrics(
        org_id VARCHAR(24),
        host_filter VARCHAR DEFAULT NULL
    )
    RETURNS TABLE (
        host VARCHAR,
        last_seen TIMESTAMP,
        total_cpu_percent FLOAT,
        total_memory_usage BIGINT,
        process_count INTEGER
    ) AS $$
    BEGIN
        RETURN QUERY
        WITH latest_logs AS (
            SELECT DISTINCT ON (host) 
                host,
                timestamp as last_seen,
                total_cpu_percent,
                total_memory_usage,
                process_count
            FROM logs
            WHERE organization_id = org_id
                AND (host_filter IS NULL OR host = host_filter)
                AND total_cpu_percent IS NOT NULL
                AND total_memory_usage IS NOT NULL
                AND process_count IS NOT NULL
            ORDER BY host, timestamp DESC
        )
        SELECT * FROM latest_logs;
    END;
    $$ LANGUAGE plpgsql;

  004_user_and_org_indexes.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-02-21
    -- Description: Add indexes for user tracking and organization queries

    -- Add indexes for user tracking
    CREATE INDEX idx_logs_user_id ON logs(user_id);
    CREATE INDEX idx_alerts_user_id ON alerts(user_id);
    CREATE INDEX idx_logs_user_timestamp ON logs(user_id, timestamp);
    CREATE INDEX idx_alerts_user_status ON alerts(user_id, status);

  005_system_organization.sql: |
    -- Schema Version: 1.0.0
    -- Created: 2025-02-21
    -- Description: Add system organization and protection mechanisms

    -- Insert system organization
    INSERT INTO organizations (id, name, status, settings) 
    VALUES ('system', 'System', 'active', '{"type": "system", "protected": true}'::jsonb)
    ON CONFLICT (id) DO NOTHING;

    -- Create function to prevent system organization modification
    CREATE OR REPLACE FUNCTION prevent_system_org_modification()
    RETURNS TRIGGER AS $$
    BEGIN
        IF OLD.id = 'system' THEN
            RAISE EXCEPTION 'Cannot modify or delete system organization';
        END IF;
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;

    -- Create trigger to protect system organization
    CREATE TRIGGER protect_system_org
    BEFORE UPDATE OR DELETE ON organizations
    FOR EACH ROW
    EXECUTE FUNCTION prevent_system_org_modification();
